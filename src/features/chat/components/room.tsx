import { useEffect, useRef } from "react";
import { ConversationHeader, Lobby, MessageInput, Messages, useUploaderStore } from "."
import { useChat } from "../hooks/use-chat"
import { ChatMessage, MessageContentType, MessageDirection, MessageStatus } from "@chatscope/use-chat";
import { Spinner } from "@/components/icons/spinner";
import { Outlet, useParams } from "react-router-dom";
import { useLoadMessages } from "../hooks/use-load-messages";
import { Button } from "@/components/ui/button";
import { createMessageContent } from "../lib/actions";
import { MessageList, MessageListRef } from "./message-list";

export const Room = () => {
  const { conversationId } = useParams() as { conversationId: string };
  const { activeConversation, setActiveConversation, sendMessage, currentUser, currentMessage, setCurrentMessage, currentMessages } = useChat("Room");
  const { clearConversationUploads, getUploadedItems } = useUploaderStore("Room");
  const messageListRef = useRef<MessageListRef>(null);

  const loadMessages = useLoadMessages("Room");

  useEffect(() => {
    if (!conversationId) return;
    setActiveConversation(conversationId);
    // This will prevent the smooth scroll to bottom when the conversation changes
    // TODO: This should be handled by the MessageList component - pass in conversationId as a prop
    // TODO: Store the scroll position in the conversation state
    messageListRef.current?.resetScroll();
  }, [conversationId, setActiveConversation])

  const handleChange = (value: string) => {
    setCurrentMessage(value);
    // Send typing indicator
  }

  const handleSend = (text: string) => {
    if (!activeConversation) return;

    const items = getUploadedItems(activeConversation.id);
    const content = createMessageContent(text, items);
    const message = new ChatMessage({
      id: "", // Id will be generated by storage generator, so here you can pass an empty string
      content,
      contentType: MessageContentType.TextMarkdown,
      senderId: currentUser!.id,
      direction: MessageDirection.Outgoing,
      status: MessageStatus.Pending
    });

    sendMessage({
      message,
      conversationId: activeConversation.id,
      senderId: currentUser!.id,
    });

    clearConversationUploads(activeConversation.id);
  };

  if (!activeConversation) return (
    <Lobby />
  )

  return (
    <div className="h-full flex flex-col items-center sm:pb-4 border-l border-border">
      <ConversationHeader />
      <hr className="w-full border-t border-border" />
      {loadMessages.status === 'success' ? (
        <MessageList className="w-full flex-1" contentClassName="py-4" ref={messageListRef}>
          <Messages messages={currentMessages} />
        </MessageList>
      ) : loadMessages.status === 'error' ? (
        <div className="w-full flex-1 py-4 flex flex-col justify-center items-center gap-2">
          <h3>We could not load messages</h3>
          <Button onClick={() => loadMessages.retry()}>Retry</Button>
        </div>
      ) : (
        <div className="flex-1 flex flex-col items-center justify-center h-full">
          <Spinner />
        </div>
      )}
      <MessageInput conversationId={conversationId} onSend={handleSend} value={currentMessage} onChange={handleChange} />
      <Outlet />
    </div>
  )
}
