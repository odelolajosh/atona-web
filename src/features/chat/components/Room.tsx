import { useCallback, useEffect, useRef, useState } from "react";
import { ConversationHeader, Lobby, MessageInput, MessageList, MessageListRef, Messages, useUploaderStore } from "."
import { useChat } from "../hooks/use-chat"
import { ChatMessage, GalleryContent, GalleryItem, HtmlContent, MessageContent, MessageContentType, MessageDirection, MessageStatus } from "@chatscope/use-chat";
import chatAPI from "../lib/api";
import { Spinner } from "@/components/icons/spinner";
import { Outlet, useParams } from "react-router-dom";
import { __DEV__ } from "../lib/const";

type Preflight = 'idle' | 'success' | 'error' | 'loading';

export const Room = () => {
  const { conversationId } = useParams() as { conversationId: string };
  const { activeConversation, setActiveConversation, sendMessage, currentUser, currentMessage, setCurrentMessage, currentMessages, addMessage } = useChat();
  const { clearConversationUploads, getUploadedItems } = useUploaderStore("Room");
  const messageListRef = useRef<MessageListRef>(null);
  const [preflight, _setPreflight] = useState<Preflight>(activeConversation?.data?.preflight || 'idle');

  const setPreflight = useCallback((value: Preflight) => {
    if (activeConversation) {
      if (!activeConversation.data) {
        activeConversation.data = {
          name: '',
          preflight: value
        };
      } else {
        activeConversation.data.preflight = value;
      }
    }
    _setPreflight(value);
  }, [activeConversation]);

  useEffect(() => {
    if (!conversationId) return;
    setActiveConversation(conversationId);
  }, [conversationId, setActiveConversation])

  const loadInitialMessages = useCallback(async () => {
    if (!activeConversation) return;

    if (__DEV__) {
      setPreflight('success');
      return;
    }

    if (preflight === 'success') return;

    setPreflight('loading');
    try {
      const messages = await chatAPI.getMessages(activeConversation?.id);

      messages.forEach((message) => {
        const chatMessage = new ChatMessage({
          id: message.uuid,
          direction: message.from.uuid === currentUser!.id ? MessageDirection.Outgoing : MessageDirection.Incoming,
          senderId: message.from.uuid,
          content: {
            content: message.body,
          },
          contentType: MessageContentType.TextHtml,
          status: MessageStatus.Sent,
          createdTime: new Date(message.created_at),
        });
        addMessage(chatMessage, activeConversation.id, false);
      })
      setPreflight('success');
    } catch (error) {
      console.error("Failed to load messages", error);
      setPreflight('error');
    }
  }, [activeConversation, addMessage, currentUser, preflight, setPreflight])

  useEffect(() => {
    if (!activeConversation) return;

    messageListRef.current?.mount()
    loadInitialMessages();
  }, [activeConversation, loadInitialMessages])

  const handleChange = (value: string) => {
    setCurrentMessage(value);
    // Send typing indicator
  }

  const handleAttachment = () => {
    if (!activeConversation) return;
    const items = getUploadedItems(activeConversation.id);
    if (!items?.length) return;

    const message = new ChatMessage({
      id: "", // Id will be generated by storage generator, so here you can pass an empty string
      content: {
        content: items.map((item) => {
          return {
            description: "",
            src: item.url,
          } as GalleryItem;
        })
      } as MessageContent<GalleryContent>,
      contentType: MessageContentType.Gallery,
      senderId: currentUser!.id,
      direction: MessageDirection.Outgoing,
      status: MessageStatus.Sent
    });

    sendMessage({
      message,
      conversationId: activeConversation.id,
      senderId: currentUser!.id,
    });

    clearConversationUploads(activeConversation.id);
  }

  const handleSend = (text: string) => {
    if (!activeConversation) return;
    handleAttachment();
    const message = new ChatMessage({
      id: "", // Id will be generated by storage generator, so here you can pass an empty string
      content: {
        content: text
      } as MessageContent<HtmlContent>,
      contentType: MessageContentType.TextHtml,
      senderId: currentUser!.id,
      direction: MessageDirection.Outgoing,
      status: MessageStatus.Sent
    });

    sendMessage({
      message,
      conversationId: activeConversation.id,
      senderId: currentUser!.id,
    });

  };

  if (!activeConversation) return (
    <Lobby />
  )

  return (
    <div className="h-full flex flex-col items-center pb-4 border-l border-border">
      <ConversationHeader />
      <hr className="w-full border-t border-border" />
      <MessageList className="w-full flex-1 py-4 message--font" ref={messageListRef}>
        {preflight === 'success' ? (
          <Messages messages={currentMessages} />
        ) : preflight === 'error' ? (
          <div className="flex-1 flex flex-col items-center justify-center h-full">
            We could not load messages
          </div>
        ) : (
          <div className="flex-1 flex flex-col items-center justify-center h-full">
            <Spinner />
          </div>
        )}
      </MessageList>
      <MessageInput conversationId={conversationId} onSend={handleSend} value={currentMessage} onChange={handleChange} />
      <Outlet />
    </div>
  )
}